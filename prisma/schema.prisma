
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  
  // Face verification fields
  faceDescriptor   String?
  lastFaceVerified DateTime?

  // Phone number fields
  phoneNumber        String?  @unique
  phoneNumberVerified Boolean @default(false)

  // Aadhar number field
  aadharNumber       String?  @unique

  // Voting fields
  constituencyId     String?
  constituency       Constituency? @relation(fields: [constituencyId], references: [id])
  hasVoted          Boolean @default(false)
  voteToken         String?  @unique // Unique token for vote verification without revealing identity

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Voting System Models
model Constituency {
  id          String    @id @default(uuid())
  name        String    @unique
  state       String
  totalVoters Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  users       User[]
  candidates  Candidate[]
  votes       Vote[]

  @@map("constituency")
}

model Candidate {
  id            String    @id @default(uuid())
  name          String
  party         String
  symbol        String?   // Party symbol/image
  photo         String?   // Candidate photo
  constituencyId String
  constituency  Constituency @relation(fields: [constituencyId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  votes         Vote[]

  @@unique([constituencyId, name]) // One candidate per constituency
  @@map("candidate")
}

model Vote {
  id            String    @id @default(uuid())
  voteToken     String    @unique // Links to user's vote token for verification
  candidateId   String
  candidate     Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  constituencyId String
  constituency  Constituency @relation(fields: [constituencyId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  
  // No direct link to user - maintains vote privacy
  // Vote can only be verified using the voteToken

  @@map("vote")
}
